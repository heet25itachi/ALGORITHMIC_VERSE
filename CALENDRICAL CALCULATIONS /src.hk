module Main where

getMonthIndex :: Int -> Int
getMonthIndex month
  | month >= 1 && month <= 12 = [11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] !! (month - 1)
  | otherwise = -1

getMonthName :: Int -> String
getMonthName month
  | month >= 1 && month <= 12 = ["January", "February", "March", "April", "May", "June",
                                 "July", "August", "September", "October", "November", "December"] !! (month - 1)
  | otherwise = "Invalid"

daysInMonth :: Int -> Int -> Int
daysInMonth month year
  | month < 1 || month > 12 || year < 1753 = -1
  | otherwise = let m = fromIntegral (getMonthIndex month) :: Double
                    y = fromIntegral year :: Double
                    d = 30 + floor (0.6 * m + 0.4) - floor (0.6 * m - 0.2) - 2 * floor (m / 12)
                    d' = if m == 12
                         then d + floor ((y - 1) / 4 - floor ((y - 1) / 4) + 0.25)
                         else d
                    d'' = if m == 12 && year `mod` 100 == 0
                          then let centuryTerm = floor (0.3 + (fromIntegral (floor (y / 100)) - 3) / 4.5 - floor (fromIntegral (floor (y / 100)) - 3) / 4.5)
                               in d' + floor ((fromIntegral centuryTerm + 99 + 100 * (y / 100 - fromIntegral (floor (y / 100)))) / 100) - 1
                          else d'
                in d''

main :: IO ()
main = do
  let tests = [(2, 2000), (3, 2023), (4, 2024), (2, 1900)]
  mapM_ (\(month, year) -> do
            let days = daysInMonth month year
            if days /= -1
              then putStrLn $ "Days in " ++ getMonthName month ++ " " ++ show year ++ ": " ++ show days
              else putStrLn "Invalid input") tests
