// Constants: Convex polygon vertices (clockwise)
vertices = [(0, 0), (10, 0), (10, 10), (0, 10)]
n_vertices = 4

// Function to compute outward normal for edge i (from vertex i to i+1)
FUNCTION compute_normal(i)
    v1 = vertices[i]
    v2 = vertices[(i + 1) MOD n_vertices]
    normal_x = -(v2.y - v1.y) // Perpendicular vector, outward
    normal_y = v2.x - v1.x
    RETURN (normal_x, normal_y)
END FUNCTION

// Function to compute dot product of two vectors
FUNCTION dot_product(a, b)
    RETURN a.x * b.x + a.y * b.y
END FUNCTION

// Function to clip a line from (x0, y0) to (x1, y1) against convex polygon
FUNCTION cyrus_beck_clip(x0, y0, x1, y1)
    // Compute direction vector D
    D = (x1 - x0, y1 - y0)
    IF D.x = 0 AND D.y = 0 THEN
        RETURN FALSE, x0, y0, x1, y1 // Degenerate line
    END IF

    // Initialize t values for entry (tE) and exit (tL)
    tE = 0.0
    tL = 1.0

    // Process each polygon edge
    FOR i FROM 0 TO n_vertices - 1
        normal = compute_normal(i)
        PE = vertices[i] // Point on edge i
        diff = (x0 - PE.x, y0 - PE.y)
        num = -dot_product(normal, diff)
        den = dot_product(normal, D)
        IF den = 0 THEN
            CONTINUE // Line parallel to edge
        END IF
        t = num / den
        IF den > 0 THEN // Exit point
            IF t < tL THEN
                tL = t
            END IF
        ELSE // Entry point
            IF t > tE THEN
                tE = t
            END IF
        END IF
    END FOR

    // Check if valid segment exists
    IF tE > tL OR tE < 0 OR tE > 1 OR tL < 0 OR tL > 1 THEN
        RETURN FALSE, x0, y0, x1, y1 // Reject
    END IF

    // Compute clipped endpoints
    x0_new = x0 + tE * D.x
    y0_new = y0 + tE * D.y
    x1_new = x0 + tL * D.x
    y1_new = y0 + tL * D.y
    RETURN TRUE, x0_new, y0_new, x1_new, y1_new
END FUNCTION

// Main program to test the algorithm
MAIN
    tests = [(2, 2, 8, 8), (12, 12, 15, 15), (5, 12, 15, 5), (-5, 5, 15, 5)]
    FOR EACH (x0, y0, x1, y1) IN tests
        accept, x0_new, y0_new, x1_new, y1_new = cyrus_beck_clip(x0, y0, x1, y1)
        PRINT "Line from (", x0, ", ", y0, ") to (", x1, ", ", y1, "): "
        IF accept THEN
            PRINT "Accepted, clipped to (", x0_new, ", ", y0_new, ") to (", x1_new, ", ", y1_new, ")"
        ELSE
            PRINT "Rejected"
        END IF
    END FOR
END MAIN



## Notes ##

Purpose: Clips a line segment from $ (x_0, y_0) $ to $ (x_1, y_1) $ against a convex polygon using the parametric equation $ P(t) = P_0 + t (P_1 - P_0) $, computing intersection parameters via dot products and selecting the maximum entry ($ t_E $) and minimum exit ($ t_L $) points.
Algorithm Details:

Parametric Equation: $ P(t) = (x_0 + t (x_1 - x_0), y_0 + t (y_1 - y_0)) $, $ 0 \leq t \leq 1 $.
Normals: Outward-facing, computed as $ N_i = (-(y_{i+1} - y_i), x_{i+1} - x_i) $ for edge from vertex $ i $ to $ i+1 $.
Intersection Parameter: $ t = -\frac{N_i \cdot (P_0 - P_{E_i})}{N_i \cdot (P_1 - P_0)} $, where $ P_{E_i} $ is a point on edge $ i $.
Classification: If $ N_i \cdot (P_1 - P_0) > 0 $, exit point; if $ < 0 $, entry point; if $ = 0 $, parallel (ignored).
Clipping: Accept if $ 0 \leq t_E \leq t_L \leq 1 $; compute clipped points $ P(t_E) $, $ P(t_L) $.


Test Cases (same as prior artifact):

(2, 2, 8, 8): Accepted, no clipping.
(12, 12, 15, 15): Rejected.
(5, 12, 15, 5): Clipped to (5, 10, 10, 5).
(-5, 5, 15, 5): Clipped to (0, 5, 10, 5).


Polygon: Rectangle with vertices (0, 0), (10, 0), (10, 10), (0, 10) (clockwise), with outward normals:

Edge 0: (0, -1).
Edge 1: (1, 0).
Edge 2: (0, 1).
Edge 3: (-1, 0).


Output Format: "Line from (x0, y0) to (x1, y1): [Accepted/Rejected][, clipped to (x0_new, y0_new) to (x1_new, y1_new)]".
Constraints:

Assumes convex polygon (clockwise vertices) and non-degenerate line ($ P_0 \neq P_1 $).
Avoids division by zero by checking $ N_i \cdot D \neq 0 $.
Uses floating-point coordinates for precision.
